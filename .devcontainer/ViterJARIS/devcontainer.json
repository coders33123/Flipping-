import matplotlib.pyplot as plt

def visualize_graph(graph):
    pos = nx.spring_layout(graph)
    edge_labels = {
        (u, v): f"{d['weight']:.2f}" for u, v, d in graph.edges(data=True)
    }
    nx.draw(graph, pos, with_labels=True, node_color='skyblue', edge_color='gray')
    nx.draw_networkx_edge_labels(graph, pos, edge_labels=edge_labels)
    plt.show()
import math

def symbolic_score_prob(base_weight: float, metadata: Dict) -> float:
    flip_depth = metadata.get("flip_depth", 1)
    vowel_flow = metadata.get("vowel_flow", False)
    decay = math.exp(-0.3 * flip_depth)
    modifier = 1.2 if vowel_flow else 1.0
    return base_weight * modifier * decay
def decode_with_loops(self, start: str, end: str, max_depth: int = 10):
    paths = []

    def dfs(path, score, visited, depth):
        if depth > max_depth:
            return
        current = path[-1]
        if current == end:
            paths.append((path[:], score))
            return
        for neighbor in self.graph.successors(current):
            edge = self.graph.get_edge_data(current, neighbor)
            if edge:
                next_score = score + edge["weight"]
                dfs(path + [neighbor], next_score, visited | {neighbor}, depth + 1)

    dfs([start], 0.0, set(), 0)
    return sorted(paths, key=lambda x: x[1], reverse=True)
nx.write_gml(decoder.graph.graph, "symbolic_graph.gml")
g = nx.read_gml("symbolic_graph.gml")
decoder.graph.graph = g
